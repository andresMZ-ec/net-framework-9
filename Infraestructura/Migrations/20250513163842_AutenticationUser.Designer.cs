// <auto-generated />
using System;
using Infraestructura.Persistencia;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructura.Migrations
{
    [DbContext(typeof(AplicationDbContext))]
    [Migration("20250513163842_AutenticationUser")]
    partial class AutenticationUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Dominio.Entidades.Permiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Permisos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "admin_users_creating",
                            Nombre = "Crear usuarios"
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "admin_users_updating",
                            Nombre = "Actualizar usuarios"
                        },
                        new
                        {
                            Id = 3,
                            Codigo = "admin_users_deleting",
                            Nombre = "Eliminar usuarios"
                        },
                        new
                        {
                            Id = 4,
                            Codigo = "admin_users_list_and_detail",
                            Nombre = "Listar usuarios"
                        });
                });

            modelBuilder.Entity("Dominio.Entidades.PermisosRoles", b =>
                {
                    b.Property<int>("PermisoId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("PermisoId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("PermisosRoles");

                    b.HasData(
                        new
                        {
                            PermisoId = 1,
                            RolId = 1
                        },
                        new
                        {
                            PermisoId = 1,
                            RolId = 2
                        },
                        new
                        {
                            PermisoId = 2,
                            RolId = 1
                        },
                        new
                        {
                            PermisoId = 2,
                            RolId = 2
                        },
                        new
                        {
                            PermisoId = 3,
                            RolId = 1
                        },
                        new
                        {
                            PermisoId = 3,
                            RolId = 2
                        },
                        new
                        {
                            PermisoId = 4,
                            RolId = 1
                        },
                        new
                        {
                            PermisoId = 4,
                            RolId = 2
                        },
                        new
                        {
                            PermisoId = 4,
                            RolId = 3
                        });
                });

            modelBuilder.Entity("Dominio.Entidades.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EsEliminado")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Acceso completo a opciones de administrador y sistema de cotización",
                            EsEliminado = false,
                            Estado = true,
                            FechaCreacion = new DateTime(2025, 5, 13, 16, 38, 41, 244, DateTimeKind.Utc).AddTicks(2938),
                            FechaModificacion = new DateTime(2025, 5, 13, 16, 38, 41, 244, DateTimeKind.Utc).AddTicks(2938),
                            Nombre = "Desarrollador"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Acceso completo al sistema administrativo y opciones de usuarios",
                            EsEliminado = false,
                            Estado = true,
                            FechaCreacion = new DateTime(2025, 5, 13, 16, 38, 41, 244, DateTimeKind.Utc).AddTicks(2938),
                            FechaModificacion = new DateTime(2025, 5, 13, 16, 38, 41, 244, DateTimeKind.Utc).AddTicks(2938),
                            Nombre = "Administrador"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Visualizacion de usuarios",
                            EsEliminado = false,
                            Estado = true,
                            FechaCreacion = new DateTime(2025, 5, 13, 16, 38, 41, 244, DateTimeKind.Utc).AddTicks(2938),
                            FechaModificacion = new DateTime(2025, 5, 13, 16, 38, 41, 244, DateTimeKind.Utc).AddTicks(2938),
                            Nombre = "Moderador"
                        });
                });

            modelBuilder.Entity("Dominio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EsEliminado")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nui")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellidos = "del Sistema",
                            Contraseña = "dev12345",
                            Correo = "desarrollo@prueba.com",
                            EsEliminado = false,
                            Estado = true,
                            FechaCreacion = new DateTime(2025, 5, 13, 16, 38, 41, 245, DateTimeKind.Utc).AddTicks(901),
                            FechaModificacion = new DateTime(2025, 5, 13, 16, 38, 41, 245, DateTimeKind.Utc).AddTicks(901),
                            NombreUsuario = "desarrollador",
                            Nombres = "Desarrollador",
                            Nui = "9999999999",
                            RolId = 1
                        },
                        new
                        {
                            Id = 2,
                            Apellidos = "del Sistema",
                            Contraseña = "admin12345",
                            Correo = "admin@prueba.com",
                            EsEliminado = false,
                            Estado = true,
                            FechaCreacion = new DateTime(2025, 5, 13, 16, 38, 41, 245, DateTimeKind.Utc).AddTicks(901),
                            FechaModificacion = new DateTime(2025, 5, 13, 16, 38, 41, 245, DateTimeKind.Utc).AddTicks(901),
                            NombreUsuario = "system_admin",
                            Nombres = "Desarrollador",
                            Nui = "9999999998",
                            RolId = 2
                        },
                        new
                        {
                            Id = 3,
                            Apellidos = "del Sistema",
                            Contraseña = "mod12345",
                            Correo = "mod@prueba.com",
                            EsEliminado = false,
                            Estado = true,
                            FechaCreacion = new DateTime(2025, 5, 13, 16, 38, 41, 245, DateTimeKind.Utc).AddTicks(901),
                            FechaModificacion = new DateTime(2025, 5, 13, 16, 38, 41, 245, DateTimeKind.Utc).AddTicks(901),
                            NombreUsuario = "system_mod",
                            Nombres = "Moderador",
                            Nui = "9999999997",
                            RolId = 3
                        });
                });

            modelBuilder.Entity("Dominio.Entidades.PermisosRoles", b =>
                {
                    b.HasOne("Dominio.Entidades.Permiso", null)
                        .WithMany()
                        .HasForeignKey("PermisoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entidades.Rol", null)
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio.Entidades.Usuario", b =>
                {
                    b.HasOne("Dominio.Entidades.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Dominio.Entidades.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
